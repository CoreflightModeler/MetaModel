/**
 */
package coreflight00.cfs.provider;

import coreflight00.cfs.util.CfsAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class CfsItemProviderAdapterFactory extends CfsAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final String copyright = "Copyright (C) 2016 Monami-ya LLC, Japan"; //$NON-NLS-1$

	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CfsItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link coreflight00.cfs.CfdpFileTransfer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CfdpFileTransferItemProvider cfdpFileTransferItemProvider;

	/**
	 * This creates an adapter for a {@link coreflight00.cfs.CfdpFileTransfer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCfdpFileTransferAdapter() {
		if (cfdpFileTransferItemProvider == null) {
			cfdpFileTransferItemProvider = new CfdpFileTransferItemProvider(this);
		}

		return cfdpFileTransferItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link coreflight00.cfs.Checksum} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChecksumItemProvider checksumItemProvider;

	/**
	 * This creates an adapter for a {@link coreflight00.cfs.Checksum}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChecksumAdapter() {
		if (checksumItemProvider == null) {
			checksumItemProvider = new ChecksumItemProvider(this);
		}

		return checksumItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link coreflight00.cfs.DataStorage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataStorageItemProvider dataStorageItemProvider;

	/**
	 * This creates an adapter for a {@link coreflight00.cfs.DataStorage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataStorageAdapter() {
		if (dataStorageItemProvider == null) {
			dataStorageItemProvider = new DataStorageItemProvider(this);
		}

		return dataStorageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link coreflight00.cfs.FileManager} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FileManagerItemProvider fileManagerItemProvider;

	/**
	 * This creates an adapter for a {@link coreflight00.cfs.FileManager}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFileManagerAdapter() {
		if (fileManagerItemProvider == null) {
			fileManagerItemProvider = new FileManagerItemProvider(this);
		}

		return fileManagerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link coreflight00.cfs.HealthAndSafety} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HealthAndSafetyItemProvider healthAndSafetyItemProvider;

	/**
	 * This creates an adapter for a {@link coreflight00.cfs.HealthAndSafety}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHealthAndSafetyAdapter() {
		if (healthAndSafetyItemProvider == null) {
			healthAndSafetyItemProvider = new HealthAndSafetyItemProvider(this);
		}

		return healthAndSafetyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link coreflight00.cfs.Housekeeping} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HousekeepingItemProvider housekeepingItemProvider;

	/**
	 * This creates an adapter for a {@link coreflight00.cfs.Housekeeping}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHousekeepingAdapter() {
		if (housekeepingItemProvider == null) {
			housekeepingItemProvider = new HousekeepingItemProvider(this);
		}

		return housekeepingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link coreflight00.cfs.LimitChecker} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LimitCheckerItemProvider limitCheckerItemProvider;

	/**
	 * This creates an adapter for a {@link coreflight00.cfs.LimitChecker}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLimitCheckerAdapter() {
		if (limitCheckerItemProvider == null) {
			limitCheckerItemProvider = new LimitCheckerItemProvider(this);
		}

		return limitCheckerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link coreflight00.cfs.MemoryDwell} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MemoryDwellItemProvider memoryDwellItemProvider;

	/**
	 * This creates an adapter for a {@link coreflight00.cfs.MemoryDwell}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMemoryDwellAdapter() {
		if (memoryDwellItemProvider == null) {
			memoryDwellItemProvider = new MemoryDwellItemProvider(this);
		}

		return memoryDwellItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link coreflight00.cfs.MemoryManagement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MemoryManagementItemProvider memoryManagementItemProvider;

	/**
	 * This creates an adapter for a {@link coreflight00.cfs.MemoryManagement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMemoryManagementAdapter() {
		if (memoryManagementItemProvider == null) {
			memoryManagementItemProvider = new MemoryManagementItemProvider(this);
		}

		return memoryManagementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link coreflight00.cfs.Scheduler} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SchedulerItemProvider schedulerItemProvider;

	/**
	 * This creates an adapter for a {@link coreflight00.cfs.Scheduler}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSchedulerAdapter() {
		if (schedulerItemProvider == null) {
			schedulerItemProvider = new SchedulerItemProvider(this);
		}

		return schedulerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link coreflight00.cfs.StoredCommanding} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StoredCommandingItemProvider storedCommandingItemProvider;

	/**
	 * This creates an adapter for a {@link coreflight00.cfs.StoredCommanding}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStoredCommandingAdapter() {
		if (storedCommandingItemProvider == null) {
			storedCommandingItemProvider = new StoredCommandingItemProvider(this);
		}

		return storedCommandingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link coreflight00.cfs.DocumentRoot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DocumentRootItemProvider documentRootItemProvider;

	/**
	 * This creates an adapter for a {@link coreflight00.cfs.DocumentRoot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDocumentRootAdapter() {
		if (documentRootItemProvider == null) {
			documentRootItemProvider = new DocumentRootItemProvider(this);
		}

		return documentRootItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (cfdpFileTransferItemProvider != null) cfdpFileTransferItemProvider.dispose();
		if (checksumItemProvider != null) checksumItemProvider.dispose();
		if (dataStorageItemProvider != null) dataStorageItemProvider.dispose();
		if (fileManagerItemProvider != null) fileManagerItemProvider.dispose();
		if (healthAndSafetyItemProvider != null) healthAndSafetyItemProvider.dispose();
		if (housekeepingItemProvider != null) housekeepingItemProvider.dispose();
		if (limitCheckerItemProvider != null) limitCheckerItemProvider.dispose();
		if (memoryDwellItemProvider != null) memoryDwellItemProvider.dispose();
		if (memoryManagementItemProvider != null) memoryManagementItemProvider.dispose();
		if (schedulerItemProvider != null) schedulerItemProvider.dispose();
		if (storedCommandingItemProvider != null) storedCommandingItemProvider.dispose();
		if (documentRootItemProvider != null) documentRootItemProvider.dispose();
	}

}
